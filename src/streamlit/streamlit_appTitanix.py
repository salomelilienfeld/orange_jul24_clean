import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix

# Chargement des donn√©es
df = pd.read_csv("./data/train2.csv")

# Configuration de la mise en page
st.set_page_config(page_title="Classification Titanic", layout="wide")

# Titre et contexte avec couleurs
st.markdown("<h1 style='text-align: center; color: #4B0082;'>Projet de Classification Binaire : Gravit√© des Passagers du Titanic</h1>", unsafe_allow_html=True)
st.markdown("""
    <div style='text-align: center; color: #555555;'>
    Le Titanic a coul√© lors de son voyage inaugural en 1912, entra√Ænant la mort de plus de 1500 passagers. 
    L'objectif de ce projet est de pr√©dire la survie des passagers en fonction de leurs caract√©ristiques. 
    Nous allons explorer les donn√©es, visualiser les r√©sultats et construire un mod√®le de classification binaire.
    </div>
""", unsafe_allow_html=True)

# Sidebar avec logos et boutons
st.sidebar.image("logo.png", width=150)  
st.sidebar.header("Navigation")
pages = ["üìú Pr√©sentation du Projet", "üè† Exploration", "üìä Data Visualization", "üìà Mod√©lisation", "üôè Remerciements"]
page = st.sidebar.radio("Aller vers", pages)

# Pr√©sentation du projet
if page == pages[0]:
    st.subheader("Pr√©sentation du Projet")
    st.markdown("""
        <div style='color: #333333;'>
        Ce projet vise √† analyser les donn√©es des passagers du Titanic afin de pr√©dire leur survie. 
        En utilisant des techniques de machine learning, nous cherchons √† comprendre quels facteurs ont influenc√© 
        la survie des passagers lors de ce tragique √©v√©nement historique.
        
        ### Objectifs
        - Explorer les donn√©es des passagers du Titanic.
        - Visualiser les relations entre diff√©rentes caract√©ristiques et la survie.
        - Construire et √©valuer des mod√®les de classification pour pr√©dire la survie.
        
        ### Importance
        Comprendre les facteurs de survie peut non seulement aider √† mieux appr√©hender cet √©v√©nement historique, 
        mais aussi fournir des enseignements sur la prise de d√©cision en situations de crise.
        </div>
    """, unsafe_allow_html=True)

# Exploration des donn√©es
if page == pages[1]:
    st.subheader("Exploration des Donn√©es")
    st.write("Affichage des 10 premi√®res lignes du jeu de donn√©es :")
    st.dataframe(df.head(10))
    st.write("Forme du DataFrame :", df.shape)
    st.write("Description des donn√©es :")
    st.dataframe(df.describe())
    
    if st.checkbox("Afficher les valeurs manquantes"):
        st.write(df.isna().sum())

    # Sous-pages pour l'exploration
    st.markdown("### Sous-pages")
    if st.button("Afficher les statistiques avanc√©es"):
        st.subheader("Statistiques Avanc√©es")
        st.write(df.describe(include='all'))

    if st.button("Afficher la distribution des √¢ges"):
        st.subheader("Distribution des √Çges")
        fig, ax = plt.subplots()
        sns.histplot(df['Age'], bins=30, kde=True, ax=ax, color='#FF6347')  # Couleur tomate
        ax.set_title("Distribution de l'√Çge des Passagers", color='#4B0082')  # Couleur indigo
        st.pyplot(fig)

# Visualisation des donn√©es
if page == pages[2]:
    st.subheader("Visualisation des Donn√©es")
    col1, col2 = st.columns(2)
    
    with col1:
        fig1, ax1 = plt.subplots()
        sns.countplot(x='Survived', data=df, ax=ax1, palette='pastel')
        ax1.set_title("Survie des Passagers", color='#4B0082')
        st.pyplot(fig1)

    with col2:
        fig2, ax2 = plt.subplots()
        sns.countplot(x='Sex', data=df, ax=ax2, palette='pastel')
        ax2.set_title("R√©partition du Genre des Passagers", color='#4B0082')
        st.pyplot(fig2)

    fig3, ax3 = plt.subplots()
    sns.countplot(x='Pclass', data=df, ax=ax3, palette='pastel')
    ax3.set_title("R√©partition des Classes des Passagers", color='#4B0082')
    st.pyplot(fig3)

    # Sous-pages pour la visualisation
    st.markdown("### Sous-pages")
    if st.button("Afficher la distribution des √¢ges"):
        st.subheader("Distribution des √Çges")
        fig4, ax4 = plt.subplots()
        sns.histplot(df['Age'], bins=30, kde=True, ax=ax4, color='#FF6347')
        ax4.set_title("Distribution de l'√Çge des Passagers", color='#4B0082')
        st.pyplot(fig4)

# Mod√©lisation
if page == pages[3]:
    st.subheader("Mod√©lisation")
    
    # S√©lecteur pour les sous-pages de mod√©lisation
    model_pages = ["Mod√©lisation Bimodale", "Mod√©lisation Multimodale"]
    model_page = st.selectbox("Choisissez un type de mod√©lisation", model_pages)

    if model_page == "Mod√©lisation Bimodale":
        st.write("Nous allons construire un mod√®le de classification binaire pour pr√©dire la survie des passagers.")
        
        # Pr√©paration des donn√©es
        df = df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)
        y = df['Survived']
        X_cat = df[['Pclass', 'Sex', 'Embarked']]
        X_num = df[['Age', 'Fare', 'SibSp', 'Parch']]
        
        # Remplissage des valeurs manquantes
        X_cat.fillna(X_cat.mode().iloc[0], inplace=True)
        X_num.fillna(X_num.median(), inplace=True)
        
        X_cat_scaled = pd.get_dummies(X_cat, columns=X_cat.columns)
        X = pd.concat([X_cat_scaled, X_num], axis=1)

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)
        scaler = StandardScaler()
        X_train[X_num.columns] = scaler.fit_transform(X_train[X_num.columns])
        X_test[X_num.columns] = scaler.transform(X_test[X_num.columns])

        # Choix du mod√®le
        choix = ['Random Forest', 'SVC', 'Logistic Regression']
        option = st.selectbox('Choix du mod√®le', choix)
        
        def prediction(classifier):
            if classifier == 'Random Forest':
                clf = RandomForestClassifier()
            elif classifier == 'SVC':
                clf = SVC()
            elif classifier == 'Logistic Regression':
                clf = LogisticRegression()
            clf.fit(X_train, y_train)
            return clf

        clf = prediction(option)
        display = st.radio('Que souhaitez-vous montrer ?', ('Accuracy', 'Confusion matrix'))
        
        if display == 'Accuracy':
            st.write("Pr√©cision du mod√®le :", clf.score(X_test, y_test))
        elif display == 'Confusion matrix':
            st.dataframe(confusion_matrix(y_test, clf.predict(X_test)))

    elif model_page == "Mod√©lisation Multimodale":
        st.write("Nous allons construire un mod√®le de classification multimodale pour pr√©dire la survie des passagers.")
        
        # Pr√©paration des donn√©es (similaire √† la bimodale mais avec plus de caract√©ristiques)
        df = df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)
        y = df['Survived']
        X_cat = df[['Pclass', 'Sex', 'Embarked']]
        X_num = df[['Age', 'Fare', 'SibSp', 'Parch']]
        
        # Remplissage des valeurs manquantes
        X_cat.fillna(X_cat.mode().iloc[0], inplace=True)
        X_num.fillna(X_num.median(), inplace=True)
        
        X_cat_scaled = pd.get_dummies(X_cat, columns=X_cat.columns)
        X = pd.concat([X_cat_scaled, X_num], axis=1)

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)
        scaler = StandardScaler()
        X_train[X_num.columns] = scaler.fit_transform(X_train[X_num.columns])
        X_test[X_num.columns] = scaler.transform(X_test[X_num.columns])

        # Choix du mod√®le
        choix = ['Random Forest', 'SVC', 'Logistic Regression']
        option = st.selectbox('Choix du mod√®le', choix)
        
        def prediction(classifier):
            if classifier == 'Random Forest':
                clf = RandomForestClassifier()
            elif classifier == 'SVC':
                clf = SVC()
            elif classifier == 'Logistic Regression':
                clf = LogisticRegression()
            clf.fit(X_train, y_train)
            return clf

        clf = prediction(option)
        display = st.radio('Que souhaitez-vous montrer ?', ('Accuracy', 'Confusion matrix'))
        
        if display == 'Accuracy':
            st.write("Pr√©cision du mod√®le :", clf.score(X_test, y_test))
        elif display == 'Confusion matrix':
            st.dataframe(confusion_matrix(y_test, clf.predict(X_test)))

# Remerciements
if page == pages[4]:
    st.subheader("Remerciements")
    st.write("Merci d'avoir consult√© ce projet !")

# Footer
st.markdown("---")
st.markdown("D√©velopp√© dans le cadre du projet Fil rouge du programme Data Science | ¬© 2025")